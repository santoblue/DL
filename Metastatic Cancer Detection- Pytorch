{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11848,"databundleVersionId":862157,"sourceType":"competition"}],"dockerImageVersionId":30068,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/metastatic-cancer-detection-pytorch-907b3b20-a139-41f0-ab96-fe48b6e2766e.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250224/auto/storage/goog4_request&X-Goog-Date=20250224T130728Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=ab751a6d52bc26bd7dbbab3f954efd42e56c785523b4fb3b6f8d0f0037b0cc7a8c1034ebbebe75d04e94cfe50d2f527b76da88c01cb2cc49f2e2929394960b5e72be752f653ef65f9dc4bbc2d505d149fdb703c788cfccb18b822a353b82845bdf4f28e7176a9cd72b3dcc156ddffb228ba3ea891c17860fac01f50ba6018cd112782025fd48be04701bc7cde6fca84624772c8290cb947b8f9c36823a96317c69d2cabbeb9a81da400f51e53d5be041100468f8bb47dc8817d612af558cc4ac46179d5fe3680a65535c048c5b6fbe89ac7586d505bacdcc4a558362d3421319bd283ff8cca7912a83f4912092fab3954c14b5a74c6c2d672d9eb6db140167a9","timestamp":1740402466891}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"source":["# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE\n","# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.\n","import kagglehub\n","kagglehub.login()\n"],"metadata":{"id":"_QxpBAveEeM6"},"cell_type":"code","outputs":[],"execution_count":null},{"source":["# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","\n","histopathologic_cancer_detection_path = kagglehub.competition_download('histopathologic-cancer-detection')\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"EJN7_TkzEeM6"},"cell_type":"code","outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Data Description\n","In this dataset, you are provided with a large number of small pathology images to classify. Files are named with an image id. The train_labels.csv file provides the ground truth for the images in the train folder. You are predicting the labels for the images in the test folder. A positive label indicates that the center 32x32px region of a patch contains at least one pixel of tumor tissue. Tumor tissue in the outer region of the patch does not influence the label. This outer region is provided to enable fully-convolutional models that do not use zero-padding, to ensure consistent behavior when applied to a whole-slide image.\n","\n","The original PCam dataset contains duplicate images due to its probabilistic sampling, however, the version presented on Kaggle does not contain duplicates. We have otherwise maintained the same data and splits as the PCam benchmark."],"metadata":{"id":"OG7wTEbkEeM7"}},{"cell_type":"markdown","source":["## I will cover the following recipes:\n","* Exploring the dataset\n","* Creating a custom dataset\n","* Splitting the dataset\n","* Transforming the data\n","* Creating dataloaders\n","* Building the classification model\n","* Defining the loss function\n","* Defining the optimizer\n","* Training and evaluation of the model\n","* Deploying the model\n","* Model inference on test data"],"metadata":{"id":"PKvp4RlhEeM7"}},{"cell_type":"markdown","source":["# Exploring the dataset"],"metadata":{"id":"9ASA9laCEeM8"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib.pylab as plt\n","from PIL import Image, ImageDraw\n","import numpy as np\n","import os"],"metadata":{"trusted":true,"id":"yVxFWKC4EeM8"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["path2csv ='../input/histopathologic-cancer-detection/train_labels.csv'\n","labels_df = pd.read_csv(path2csv)\n","labels_df.head()"],"metadata":{"trusted":true,"id":"blBnXdZTEeM8"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["labels_df['label'].value_counts()"],"metadata":{"trusted":true,"id":"zeUjlDQKEeM8"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["%matplotlib inline\n","plt.hist(labels_df['label'])\n","plt.show()"],"metadata":{"trusted":true,"id":"cFWmTdK2EeM8"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["**let's visualize a few images that have a positive label. A positive label shows that\n","the center 32 x 32 region of an image contains at least one pixel of tumor tissue**"],"metadata":{"id":"uxOtzi66EeM8"}},{"cell_type":"code","source":["# get the ids for malignant images\n","malignantIds = labels_df.loc[labels_df['label']==1]['id'].values"],"metadata":{"trusted":true,"id":"oQmh_T3_EeM9"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["malignantIds"],"metadata":{"trusted":true,"id":"jzJO4odDEeM9"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# Define the path to data:\n","path2train = '../input/histopathologic-cancer-detection/train'"],"metadata":{"trusted":true,"id":"ATXpQ6PxEeM9"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# show images in grayscale, if you want color change it to True\n","color=False"],"metadata":{"trusted":true,"id":"EvaoesutEeM9"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# e set the figure sizes:\n","plt.rcParams['figure.figsize'] = (10.0,10.0)\n","plt.subplots_adjust(wspace=0, hspace=0)\n","nrows,ncols=3,3"],"metadata":{"trusted":true,"id":"32io-kXxEeM9"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["### display the images"],"metadata":{"id":"98AfPcU0EeM9"}},{"cell_type":"code","source":["for i,id_ in enumerate(malignantIds[:nrows*ncols]):\n","    print(id_)\n","    full_filenames = os.path.join(path2train , id_ +'.tif')\n","    # load image\n","    img = Image.open(full_filenames)\n","    # draw a 32*32 rectangle\n","    draw = ImageDraw.Draw(img)\n","    draw.rectangle(((32, 32), (64, 64)),outline=\"green\")\n","    plt.subplot(3, 3, i+1)\n","    if color is True:\n","        plt.imshow(np.array(img))\n","    else:\n","        plt.imshow(np.array(img)[:,:,0],cmap=\"gray\")\n","    plt.axis('off')"],"metadata":{"trusted":true,"id":"4HK3ugmkEeM9"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["#See what the path looks like\n","full_filenames"],"metadata":{"trusted":true,"id":"ZomBgAW5EeM9"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["labels_df.loc[labels_df['label']==0]['id'].values"],"metadata":{"trusted":true,"id":"KoG_T_IjEeM9"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Creating a custom dataset\n","create a custom Dataset class by subclassing the PyTorch Dataset class."],"metadata":{"id":"9zS5C4iiEeM9"}},{"cell_type":"code","source":["import torch\n","from torch.utils.data import Dataset\n","import pandas as pd\n","import torchvision.transforms as transforms\n"],"metadata":{"trusted":true,"id":"4p-pJ6FxEeM-"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# fix torch random seed\n","torch.manual_seed(0)"],"metadata":{"trusted":true,"id":"MNObW3qmEeM-"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["class histoCancerDataset(Dataset):\n","    def __init__(self, data_dir, transform,data_type=\"train\"):\n","\n","        # path to images\n","        path2data=os.path.join(data_dir,data_type)\n","\n","        # get list of images\n","        filenames = os.listdir(path2data)\n","\n","        # get the full path to images\n","        self.full_filenames = [os.path.join(path2data, f) for f in filenames]\n","\n","        # labels are in a csv file named train_labels.csv\n","        path2csvLabels=os.path.join(data_dir,\"train_labels.csv\")\n","        labels_df=pd.read_csv(path2csvLabels)\n","\n","        # set data frame index to id\n","        labels_df.set_index(\"id\", inplace=True)\n","\n","        # obtain labels from data frame\n","        self.labels = [labels_df.loc[filename[:-4]].values[0] for filename in filenames]\n","\n","        self.transform = transform\n","\n","    def __len__(self):\n","        #return the size of dataset\n","        return len(self.full_filenames)\n","\n","    def __getitem__(self, idx):\n","        # open image, apply transforms and return with label\n","        image = Image.open(self.full_filenames[idx])\n","        image = self.transform(image)\n","        return image, self.labels[idx]"],"metadata":{"trusted":true,"id":"9nmCcb77EeM-"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["import torchvision.transforms as transforms\n","data_transformer = transforms.Compose([transforms.ToTensor()])"],"metadata":{"trusted":true,"id":"hv5WjHVyEeM-"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["data_dir = \"../input/histopathologic-cancer-detection\"\n","histo_dataset = histoCancerDataset(data_dir, data_transformer, \"train\")\n","print(len(histo_dataset))"],"metadata":{"trusted":true,"id":"2DKRj2RvEeM-"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# load an image\n","img,label=histo_dataset[9]\n","print(img.shape,torch.min(img),torch.max(img))"],"metadata":{"trusted":true,"id":"p5-VrdOWEeM-"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Splitting the dataset\n","\n","**We need to provide a validation dataset to track the model's performance during training.\n","We use 20% of histo_dataset as the validation dataset and use the rest as the training\n","dataset.**"],"metadata":{"id":"Dx2htXOfEeM-"}},{"cell_type":"markdown","source":["### Let's split histo_dataset:"],"metadata":{"id":"w1VRBBaHEeM-"}},{"cell_type":"code","source":["from torch.utils.data import random_split\n","\n","len_histo=len(histo_dataset)\n","len_train=int(0.8*len_histo)\n","len_val=len_histo-len_train\n","\n","train_ds,val_ds=random_split(histo_dataset,[len_train,len_val])\n","\n","print(\"train dataset length:\", len(train_ds))\n","print(\"validation dataset length:\", len(val_ds))\n"],"metadata":{"trusted":true,"id":"-6s2BQjOEeM-"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["#get an image from the training dataset:\n","for x,y in train_ds:\n","    print(x.shape,y)\n","    break"],"metadata":{"trusted":true,"id":"BC0JNGAvEeM-"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# get an image from the validation dataset:\n","for x,y in val_ds:\n","    print(x.shape,y)\n","    break"],"metadata":{"trusted":true,"id":"jQjctc6AEeM-"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["### Let's display a few samples from train_ds"],"metadata":{"id":"dl8TC3DREeM-"}},{"cell_type":"code","source":["import torch.utils\n","import numpy as np\n","np.random.seed(0)"],"metadata":{"trusted":true,"id":"687_2qBqEeM-"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Define a helper function to show an image:"],"metadata":{"id":"0Rqvgmj9EeM-"}},{"cell_type":"code","source":["from torchvision import utils\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","np.random.seed(0)\n","\n","\n","def show(img,y,color=False):\n","    # convert tensor to numpy array\n","    npimg = img.numpy()\n","\n","    # Convert to H*W*C shape\n","    npimg_tr=np.transpose(npimg, (1,2,0))\n","\n","    if color==False:\n","        npimg_tr=npimg_tr[:,:,0]\n","        plt.imshow(npimg_tr,interpolation='nearest',cmap=\"gray\")\n","    else:\n","        # display images\n","        plt.imshow(npimg_tr,interpolation='nearest')\n","    plt.title(\"label: \"+str(y))\n","\n","grid_size=4\n","rnd_inds=np.random.randint(0,len(train_ds),grid_size)\n","print(\"image indices:\",rnd_inds)\n","\n","x_grid_train=[train_ds[i][0] for i in rnd_inds]\n","y_grid_train=[train_ds[i][1] for i in rnd_inds]\n","\n","x_grid_train=utils.make_grid(x_grid_train, nrow=4, padding=2)\n","print(x_grid_train.shape)\n","\n","plt.rcParams['figure.figsize'] = (10.0, 5)\n","show(x_grid_train,y_grid_train)"],"metadata":{"trusted":true,"id":"pykXOGYiEeM_"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["grid_size=4\n","rnd_inds=np.random.randint(0,len(val_ds),grid_size)\n","print(\"image indices:\",rnd_inds)\n","x_grid_val=[val_ds[i][0] for i in range(grid_size)]\n","y_grid_val=[val_ds[i][1] for i in range(grid_size)]\n","x_grid_val=utils.make_grid(x_grid_val, nrow=4, padding=2)\n","print(x_grid_val.shape)\n","show(x_grid_val,y_grid_val)\n"],"metadata":{"trusted":true,"id":"dMFEBIsUEeM_"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Transforming the data\n","**we will define a few image transformations and then update the dataset\n","transformation function**"],"metadata":{"trusted":true,"id":"0UeZqzvoEeM_"}},{"cell_type":"code","source":["train_transformer = transforms.Compose([\n"," transforms.RandomHorizontalFlip(p=0.5),\n"," transforms.RandomVerticalFlip(p=0.5),\n"," transforms.RandomRotation(45),\n","transforms.RandomResizedCrop(96,scale=(0.8,1.0),ratio=(1.0,1.0)),\n"," transforms.ToTensor()])"],"metadata":{"trusted":true,"id":"blTF6pl2EeM_"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["**For the validation dataset, we don't need any augmentation. So, we only convert\n","the images into tensors in the transforms function:**"],"metadata":{"trusted":true,"id":"POCBfjoNEeM_"}},{"cell_type":"code","source":["val_transformer = transforms.Compose([transforms.ToTensor()])"],"metadata":{"trusted":true,"id":"HON4RwsrEeNC"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# overwrite the transform functions\n","train_ds.transform=train_transformer\n","val_ds.transform=val_transformer"],"metadata":{"trusted":true,"id":"3uVg4R_3EeNC"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Creating dataloaders"],"metadata":{"trusted":true,"id":"hICUzFgfEeNC"}},{"cell_type":"code","source":["#let's define two dataloaders for the datasets:\n","from torch.utils.data import DataLoader\n","train_dl = DataLoader(train_ds, batch_size=32, shuffle=True)\n","val_dl = DataLoader(val_ds, batch_size=64, shuffle=False)"],"metadata":{"trusted":true,"id":"a9dMOoMzEeNC"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# extract a batch from training data\n","for x,y in train_dl:\n","    print(x.shape)\n","    print(y.shape)\n","    break"],"metadata":{"trusted":true,"id":"pLEKXsoKEeNC"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# get a data batch from the validation dataloader\n","for x,y in val_dl:\n","    print(x.shape)\n","    print(y.shape)\n","    break\n"],"metadata":{"trusted":true,"id":"Q8_LyEWmEeNC"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Building the classification model"],"metadata":{"trusted":true,"id":"tA0p4BD9EeNC"}},{"cell_type":"code","source":["# get labels for validation dataset\n","y_val=[y for _,y in val_ds]"],"metadata":{"trusted":true,"id":"Xi2JWMiwEeNC"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["#define a function to calculate the classification accuracy\n","\n","def accuracy(labels, out):\n","    return np.sum(out==labels)/float(len(labels))\n","\n","#calculate a dumb baseline for all-zero predictions:\n","acc_all_zeros = accuracy(y_val,np.zeros_like(y_val))\n","print(\"accuracy all zero prediction: %.2f\" %acc_all_zeros)\n"],"metadata":{"trusted":true,"id":"E8G7KWr3EeNC"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["acc_all_one = accuracy(y_val,np.ones_like(y_val))\n","print(\"accuracy all ones prediction: %.2f\" %acc_all_one)"],"metadata":{"trusted":true,"id":"1pV1VKbLEeND"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["**let's calculate a dumb baseline for random predictions:**\n"],"metadata":{"id":"LcV7tgFFEeND"}},{"cell_type":"code","source":["acc_random=accuracy(y_val,np.random.randint(2,size=len(y_val)))\n","print(\"accuracy random prediction: %.2f\" %acc_random)"],"metadata":{"trusted":true,"id":"lNR0WCDPEeND"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["**we developed findConv2DOutShape to automatically compute the output size of\n","a CNN and pooling layer. The inputs to this function are:**\n","* H_in: an integer representing the height of input data\n","* W_in: an integer representing the width of input data\n","* conv: an object of the CNN layer\n","* pool: an integer representing the pooling size and default to 2\n","\n","The function receives the input size, H_in, W_in, and conv layer and provides the output\n","size, H_out, W_out. The formula to compute the output size is given in the following link:\n","https://pytorch.org/docs/stable/nn.html\n"],"metadata":{"id":"wcZYFkKrEeND"}},{"cell_type":"code","source":["import torch.nn as nn\n","#define the helper function\n","\n","def findConv2dOutShape(H_in,W_in,conv,pool =2):\n","    kernel_size=conv.kernel_size\n","    stride=conv.stride\n","    padding=conv.padding\n","    dilation=conv.dilation\n","\n","    # Ref: https://pytorch.org/docs/stable/nn.html\n","    H_out=np.floor((H_in+2*padding[0]-dilation[0]*(kernel_size[0]-1)-1)/stride[0]+1)\n","    W_out=np.floor((W_in+2*padding[1]-dilation[1]*(kernel_size[1]-1)-1)/stride[1]+1)\n","\n","    if pool:\n","        H_out/=pool\n","        W_out/=pool\n","\n","    return int(H_out),int(W_out)\n","\n"],"metadata":{"trusted":true,"id":"JKkO_jzTEeND"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# example\n","conv1 = nn.Conv2d(3, 8, kernel_size=3)\n","h,w=findConv2dOutShape(96,96,conv1)\n","print(h,w)"],"metadata":{"trusted":true,"id":"mvSWa2uNEeND"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["### now let's implement the CNN model.\n"],"metadata":{"id":"lbvHlDQvEeND"}},{"cell_type":"code","source":["import torch.nn.functional as F\n","import torch.nn as nn\n","class Net (nn.Module):\n","    def __init__(self,params):\n","        super(Net,self). __init__()\n","        C_in,H_in,W_in=params[\"input_shape\"]\n","        init_f=params[\"initial_filters\"]\n","        num_fc1=params[\"num_fc1\"]\n","        num_classes=params[\"num_classes\"]\n","        self.dropout_rate=params[\"dropout_rate\"]\n","\n","\n","        self.conv1 = nn.Conv2d(C_in, init_f, kernel_size=3)\n","        h,w=findConv2dOutShape(H_in,W_in,self.conv1)\n","\n","        self.conv2 = nn.Conv2d(init_f, 2*init_f, kernel_size=3)\n","        h,w=findConv2dOutShape(h,w,self.conv2)\n","\n","        self.conv3 = nn.Conv2d(2*init_f, 4*init_f, kernel_size=3)\n","        h,w=findConv2dOutShape(h,w,self.conv3)\n","\n","        self.conv4 = nn.Conv2d(4*init_f, 8*init_f, kernel_size=3)\n","        h,w=findConv2dOutShape(h,w,self.conv4)\n","\n","        # compute the flatten size\n","        self.num_flatten=h*w*8*init_f\n","        self.fc1 = nn.Linear(self.num_flatten, num_fc1)\n","        self.fc2 = nn.Linear(num_fc1, num_classes)\n","\n","\n","    def forward(self, x):\n","        x = F.relu(self.conv1(x))\n","        x = F.max_pool2d(x, 2, 2)\n","        x = F.relu(self.conv2(x))\n","        x = F.max_pool2d(x, 2, 2)\n","        x = F.relu(self.conv3(x))\n","        x = F.max_pool2d(x, 2, 2)\n","        x = F.relu(self.conv4(x))\n","        x = F.max_pool2d(x, 2, 2)\n","        x = x.view(-1, self.num_flatten)\n","        x = F.relu(self.fc1(x))\n","        x=F.dropout(x, self.dropout_rate, training= self.training)\n","        x = self.fc2(x)\n","        return F.log_softmax(x, dim=1)\n","\n","\n","# dict to define model parameters\n","params_model={\"input_shape\": (3,96,96),\"initial_filters\": 8,\"num_fc1\": 100\n","              ,\"dropout_rate\": 0.25, \"num_classes\": 2}\n","\n","# create model\n","cnn_model = Net(params_model)\n"],"metadata":{"trusted":true,"id":"7Om76UlvEeND"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["torch.cuda.is_available()"],"metadata":{"trusted":true,"id":"2oK5uwOrEeND"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# move model to cuda/gpu device\n","if torch.cuda.is_available():\n","    device = torch.device(\"cuda\")\n","    cnn_model=cnn_model.to(device)"],"metadata":{"trusted":true,"id":"aUtNsmlFEeND"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["print(cnn_model.parameters)"],"metadata":{"trusted":true,"id":"kU7D1BezEeNE"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["print(next(cnn_model.parameters()).device)\n"],"metadata":{"trusted":true,"id":"4nGt41w0EeNE"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["pip install torchsummary"],"metadata":{"trusted":true,"id":"ir3DiRM1EeNE"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["from torchsummary import summary\n","summary(cnn_model, input_size=(3, 96, 96),device=device.type)"],"metadata":{"trusted":true,"id":"FHH_iQygEeNE"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Defining the loss function"],"metadata":{"id":"g5CixvvLEeNE"}},{"cell_type":"code","source":["loss_func = nn.NLLLoss(reduction=\"sum\")"],"metadata":{"trusted":true,"id":"rMy40si6EeNE"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# use the loss in an example:\n","\n","# fixed random seed\n","torch.manual_seed(0)\n","\n","n,c=8,2\n","y = torch.randn(n, c, requires_grad=True)\n","ls_F = nn.LogSoftmax(dim=1)\n","y_out=ls_F(y)\n","print(y_out.shape)\n","\n","target = torch.randint(c,size=(n,))\n","print(target.shape)\n","\n","loss = loss_func(y_out, target)\n","print(loss.item())"],"metadata":{"trusted":true,"id":"KQGt3acWEeNE"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["loss.backward()\n","print (y.data)"],"metadata":{"trusted":true,"id":"-4_YKQkXEeNE"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Defining the optimizer\n"],"metadata":{"id":"EacVPtR0EeNE"}},{"cell_type":"code","source":["cnn_model.parameters()"],"metadata":{"trusted":true,"id":"vmCOMBdqEeNE"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# let's define an object of the Adam optimizer with a learning rate of 3e-4:\n","\n","from torch import optim\n","opt = optim.Adam(cnn_model.parameters(), lr=3e-4)\n"],"metadata":{"trusted":true,"id":"l0Aqu_aPEeNE"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# We can read the current value of the learning rate using the following function:\n","def get_lr(opt):\n","    for param_group in opt.param_groups:\n","        return param_group['lr']\n","\n","current_lr=get_lr(opt)\n","print('current lr={}'.format(current_lr))"],"metadata":{"trusted":true,"id":"KOK9DdX-EeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["from torch.optim.lr_scheduler import ReduceLROnPlateau\n","\n","# define learning rate scheduler\n","lr_scheduler = ReduceLROnPlateau(opt, mode='min',factor=0.5, patience=20,verbose=1)"],"metadata":{"trusted":true,"id":"5WwXgBC3EeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["for i in range(100):\n","    lr_scheduler.step(1)"],"metadata":{"trusted":true,"id":"BiOAcTpDEeNF"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Training and Evaluation\n","**first, let's develop a helper function to count the number of correct predictions\n","per data batch:**"],"metadata":{"id":"wmlAp_FFEeNF"}},{"cell_type":"code","source":["def metrics_batch(output, target):\n","    # get output class\n","    pred = output.argmax(dim=1, keepdim=True)\n","\n","    # compare output class with target class\n","    corrects=pred.eq(target.view_as(pred)).sum().item()\n","    return corrects"],"metadata":{"trusted":true,"id":"riG6kbo7EeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["def loss_batch(loss_func, output, target, opt=None):\n","\n","    # get loss\n","    loss = loss_func(output, target)\n","\n","    # get performance metric\n","    metric_b = metrics_batch(output,target)\n","\n","    if opt is not None:\n","        opt.zero_grad()\n","        loss.backward()\n","        opt.step()\n","\n","    return loss.item(), metric_b\n"],"metadata":{"trusted":true,"id":"w705oxaVEeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# define device as a global variable\n","device = torch.device(\"cuda\")\n","\n","def loss_epoch(model,loss_func,dataset_dl,sanity_check=False,opt=None):\n","    running_loss=0.0\n","    running_metric=0.0\n","    len_data=len(dataset_dl.dataset)\n","\n","    for xb, yb in dataset_dl:\n","        # move batch to device\n","        xb=xb.to(device)\n","        yb=yb.to(device)\n","\n","        # get model output\n","        output=model(xb)\n","\n","        # get loss per batch\n","        loss_b,metric_b=loss_batch(loss_func, output, yb, opt)\n","\n","        # update running loss\n","        running_loss+=loss_b\n","\n","        # update running metric\n","        if metric_b is not None:\n","            running_metric+=metric_b\n","\n","        # break the loop in case of sanity check\n","        if sanity_check is True:\n","            break\n","\n","    # average loss value\n","    loss=running_loss/float(len_data)\n","\n","    # average metric value\n","    metric=running_metric/float(len_data)\n","\n","    return loss, metric"],"metadata":{"trusted":true,"id":"llWRB0y6EeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["def train_val(model, params):\n","    # extract model parameters\n","    num_epochs=params[\"num_epochs\"]\n","    loss_func=params[\"loss_func\"]\n","    opt=params[\"optimizer\"]\n","    train_dl=params[\"train_dl\"]\n","    val_dl=params[\"val_dl\"]\n","    sanity_check=params[\"sanity_check\"]\n","    lr_scheduler=params[\"lr_scheduler\"]\n","    path2weights=params[\"path2weights\"]\n","\n","    # history of loss values in each epoch\n","    loss_history={\n","        \"train\": [],\n","        \"val\": [],\n","    }\n","\n","    # histroy of metric values in each epoch\n","    metric_history={\n","        \"train\": [],\n","        \"val\": [],\n","    }\n","\n","    # a deep copy of weights for the best performing model\n","    best_model_wts = copy.deepcopy(model.state_dict())\n","\n","    # initialize best loss to a large value\n","    best_loss=float('inf')\n","\n","    # main loop\n","    for epoch in range(num_epochs):\n","\n","        # get current learning rate\n","        current_lr=get_lr(opt)\n","        print('Epoch {}/{}, current lr={}'.format(epoch, num_epochs - 1, current_lr))\n","\n","        # train model on training dataset\n","        model.train()\n","        train_loss, train_metric=loss_epoch(model,loss_func,train_dl,sanity_check,opt)\n","\n","        # collect loss and metric for training dataset\n","        loss_history[\"train\"].append(train_loss)\n","        metric_history[\"train\"].append(train_metric)\n","\n","        # evaluate model on validation dataset\n","        model.eval()\n","        with torch.no_grad():\n","            val_loss, val_metric=loss_epoch(model,loss_func,val_dl,sanity_check)\n","\n","\n","        # store best model\n","        if val_loss < best_loss:\n","            best_loss = val_loss\n","            best_model_wts = copy.deepcopy(model.state_dict())\n","\n","            # store weights into a local file\n","            torch.save(model.state_dict(), path2weights)\n","            print(\"Copied best model weights!\")\n","\n","        # collect loss and metric for validation dataset\n","        loss_history[\"val\"].append(val_loss)\n","        metric_history[\"val\"].append(val_metric)\n","\n","        # learning rate schedule\n","        lr_scheduler.step(val_loss)\n","        if current_lr != get_lr(opt):\n","            print(\"Loading best model weights!\")\n","            model.load_state_dict(best_model_wts)\n","\n","        print(\"train loss: %.6f, dev loss: %.6f, accuracy: %.2f\" %(train_loss,val_loss,100*val_metric))\n","        print(\"-\"*10)\n","\n","    # load best model weights\n","    model.load_state_dict(best_model_wts)\n","\n","    return model, loss_history, metric_history"],"metadata":{"trusted":true,"id":"ZAWj86CVEeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["import copy\n","\n","loss_func = nn.NLLLoss(reduction=\"sum\")\n","opt = optim.Adam(cnn_model.parameters(), lr=3e-4)\n","lr_scheduler = ReduceLROnPlateau(opt, mode='min',factor=0.5, patience=20,verbose=1)\n","\n","params_train={\n"," \"num_epochs\": 100,\n"," \"optimizer\": opt,\n"," \"loss_func\": loss_func,\n"," \"train_dl\": train_dl,\n"," \"val_dl\": val_dl,\n"," \"sanity_check\": True,\n"," \"lr_scheduler\": lr_scheduler,\n"," \"path2weights\": \"weights.pt\",\n","}\n","\n","# train and validate the model\n","cnn_model,loss_hist,metric_hist=train_val(cnn_model,params_train)"],"metadata":{"trusted":true,"id":"4KiuXgPREeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# Train-Validation Progress\n","num_epochs=params_train[\"num_epochs\"]\n","\n","# plot loss progress\n","plt.title(\"Train-Val Loss\")\n","plt.plot(range(1,num_epochs+1),loss_hist[\"train\"],label=\"train\")\n","plt.plot(range(1,num_epochs+1),loss_hist[\"val\"],label=\"val\")\n","plt.ylabel(\"Loss\")\n","plt.xlabel(\"Training Epochs\")\n","plt.legend()\n","plt.show()\n","\n","# plot accuracy progress\n","plt.title(\"Train-Val Accuracy\")\n","plt.plot(range(1,num_epochs+1),metric_hist[\"train\"],label=\"train\")\n","plt.plot(range(1,num_epochs+1),metric_hist[\"val\"],label=\"val\")\n","plt.ylabel(\"Accuracy\")\n","plt.xlabel(\"Training Epochs\")\n","plt.legend()\n","plt.show()"],"metadata":{"trusted":true,"id":"fPUlVy8NEeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["import copy\n","\n","loss_func = nn.NLLLoss(reduction=\"sum\")\n","opt = optim.Adam(cnn_model.parameters(), lr=3e-4)\n","lr_scheduler = ReduceLROnPlateau(opt, mode='min',factor=0.5, patience=20,verbose=1)\n","\n","params_train={\n"," \"num_epochs\": 2,\n"," \"optimizer\": opt,\n"," \"loss_func\": loss_func,\n"," \"train_dl\": train_dl,\n"," \"val_dl\": val_dl,\n"," \"sanity_check\": False,\n"," \"lr_scheduler\": lr_scheduler,\n"," \"path2weights\": \"weights.pt\",\n","}\n","\n","# train and validate the model\n","cnn_model,loss_hist,metric_hist=train_val(cnn_model,params_train)"],"metadata":{"trusted":true,"id":"KFgqsaEfEeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# Train-Validation Progress\n","num_epochs=params_train[\"num_epochs\"]\n","\n","# plot loss progress\n","plt.title(\"Train-Val Loss\")\n","plt.plot(range(1,num_epochs+1),loss_hist[\"train\"],label=\"train\")\n","plt.plot(range(1,num_epochs+1),loss_hist[\"val\"],label=\"val\")\n","plt.ylabel(\"Loss\")\n","plt.xlabel(\"Training Epochs\")\n","plt.legend()\n","plt.show()\n","\n","# plot accuracy progress\n","plt.title(\"Train-Val Accuracy\")\n","plt.plot(range(1,num_epochs+1),metric_hist[\"train\"],label=\"train\")\n","plt.plot(range(1,num_epochs+1),metric_hist[\"val\"],label=\"val\")\n","plt.ylabel(\"Accuracy\")\n","plt.xlabel(\"Training Epochs\")\n","plt.legend()\n","plt.show()"],"metadata":{"trusted":true,"id":"duc99dxJEeNF"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# # Turn off gradients\n","#cnn_model.eval()\n","#\n","#preds = []\n","#for batch_i, (data, target) in enumerate(valid_loader):\n","#    data, target = data.cuda(), target.cuda()\n","#    output = cnn_model(data)\n","#    if(batch_i==0):\n","#        print(data.shape, target.shape)\n","#    pr = output.detach().cpu().numpy()\n","#    for i in pr:\n","#        preds.append(i)\n","#\n","## # Create Submission file\n","#sample_sub['label'] = preds"],"metadata":{"trusted":true,"id":"QfrwlXw1EeNG"},"outputs":[],"execution_count":null}]}